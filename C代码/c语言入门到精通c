// 循环流程图
* 先判断再处理的是当型循环 先处理再判断的是直到型循环

// c语言规范
* 代码缩进 4字符缩进
* 变量命名
* 函数命名
* 注释
* 程序变量要集中声明，集中赋值

// 字符串
* 字符串存储都会有一个结束位\0，如果没加，下载加载时候可能会报错或者出不来
* 字符长度为1，字符串就算只有一个字符，长度也为2，因为有结束位

// static 和 const区别
* static
* 只分配一次内存，只在第一次执行的时候进行初始化
* static 变量是模块内的全局变量，只可以在当前模块中调用
* static 函数只可以在当前模块调用

* const
* const 变量不可被更改
* const 可以指向指针，也可以指向指针内容
* const 在函数中传入时，代表此参数不可被修改


// 数据类型转换
* 注：double -> int 会丢掉小数点，使用int计算，然后赋值double时，需要先转成小数，例：
int a = 3, b = 2;
float c = a / b;   // 如果不转换，默认结果为整型，会舍掉小数点，变成1 正确用法应该将a转换成double
float c = a * 1.0 / b;
float c = (double)a / b;
* 注2：转换谁则用括号包括谁，例如：(double)a / b 和 (double)(a / b)是两种结果

// 逻辑运算符等级 ！ && ||，逻辑！优先级最高，然后是&&(and)，最后时||(或)
* 赋值=运算比，优先级高 例：a = 2 + 1， 3 + 2; a = 3  vscode 里直接报红，不可这样写，加括号可以执行最后一次运算
* 神经病操作 a = 7; a += a *= a /= a - 5;   从右向左计算，所以先计算a/(a-5), a = 7 / 2 = 3; 再计算 a *= 3 即a = 3 * 3 = 9; 最后计算 a = 9 + 9 = 18;

// 常用输入输出 stdio.h
* getchar(); 获取输入 需要用户按一个按键
* putchar('a'); 打印单字符

* puts(*str); 输出字符串，直到\0结束 // 注：如果str没有给到\0标志位，puts打印的字符会不对
* char *gets(*str); 获取输入字符串

// 格式化打印
* %d %i 十进制
* %u 无符号十进制
* %o 无符号八进制
* %x %X 无符号十六进制，大x小x 代表大小写
* %s 字符串  %c 单字符
* %f 浮点
* m 指定输出字段宽度，向右对齐
* n n位小数，字符串时截取的字符个数
* - 向左对齐
* 格式化输出浮点  %.2f，代表2位小数  %10.2f, 代表最大输出宽度为10，并截取2位小数

// 单字符大小写转换
* 小写 -> 大写 'c' - 32
* 大写 -> 小写 'c' + 32

// 浮点做比较不要用==，而要用>= 或者<= 因为浮点不精准

// if else 和 switch case的区别
* 时间：if else越多，时间越长，switch case每个分支的时间一样，if在少量判断情况下检验速度快，3-4个用if
* 注：经测试 300w次6个分支，if用时6ms-10ms，switch case也差不太多